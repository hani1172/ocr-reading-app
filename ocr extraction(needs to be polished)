import cv2
import pytesseract
import numpy as np

# Load the image using OpenCV
img = cv2.imread('Capture1.png')

# Convert the image to RGB (OpenCV uses BGR by default)
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Use pytesseract to extract text and its bounding box coordinates
d = pytesseract.image_to_data(img_rgb, output_type=pytesseract.Output.DICT)

# Process the OCR results
n_boxes = len(d['text'])
readable_boxes = []  # List to store readable boxes
for i in range(n_boxes):
    # Filter out weak detections (confidence value of -1)
    if int(d['conf'][i]) > 0:
        # Extract relevant information from OCR results
        (x, y, w, h) = (d['left'][i], d['top'][i], d['width'][i], d['height'][i])
        text = d['text'][i]
        readable_boxes.append(((x, y), (x + w, y + h), text))  # Store bounding box coordinates and text

# Determine the size of the output canvas
max_width = max(box[1][0] for box in readable_boxes)
max_height = max(box[1][1] for box in readable_boxes)
canvas_height = max_height + 100
canvas_width = max_width + 100

# Create a blue canvas
canvas = np.zeros((canvas_height, canvas_width, 3), dtype=np.uint8)
canvas[:, :] = (255, 0, 0)  # Set all pixels to blue

# Paste the original image onto the canvas
offset_x = 50  # Offset for centering the image horizontally
offset_y = 50  # Offset for centering the image vertically
canvas[offset_y:img_rgb.shape[0]+offset_y, offset_x:img_rgb.shape[1]+offset_x] = img_rgb

# Draw bounding boxes and labels on the canvas
for i, box in enumerate(readable_boxes):
    (x1, y1), (x2, y2), text = box
    cv2.rectangle(canvas, (x1+offset_x, y1+offset_y), (x2+offset_x, y2+offset_y), (255, 255, 255), 1)  # Draw bounding box
    text_size = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 1)[0]
    text_x = x1 + (x2 - x1) // 2 - text_size[0] // 2 + offset_x
    text_y = y1 + (y2 - y1) // 2 + text_size[1] // 2 + offset_y
    cv2.putText(canvas, text, (text_x, text_y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1, cv2.LINE_AA)  # Add label

# Display the canvas
cv2.imshow('Bounding Boxes on Blue Canvas', canvas)
cv2.waitKey(0)
cv2.destroyAllWindows()

# Print the count of readable boxes
print(f"Number of Readable Boxes: {len(readable_boxes)}")
